
# generate gaussian data
from numpy.random import seed
from numpy.random import randn
from numpy import mean
from numpy import std
# seed the random number generator
seed(1)
# generate univariate observations
data = 5 * randn(100) + 50
# summarize
print('mean=%.3f stdv=%.3f' % (mean(data), std(data)))

print(data)

[58.12172682 46.94121793 47.35914124 44.63515689 54.32703815 38.49230652
 58.72405882 46.1939655 51.59519548 48.75314812 57.31053969 39.69929645
 48.38791398 48.07972823 55.66884721 44.50054366 49.13785896 45.61070791
 50.21106873 52.91407607 44.49690411 55.72361855 54.5079536 52.51247169
 54.50427975 46.5813607 49.38554887 45.32115283 48.6605596 52.65177733
 46.54169624 48.01623237 46.5641365 45.77397179 46.64376935 49.93667701
 44.41344826 51.17207849 58.29901089 53.7102208 49.04082224 45.56185518
 46.26420853 58.46227301 50.25403877 46.81502177 50.95457742 60.50127568
 50.60079476 53.08601555 51.5008516 48.23875077 44.28740901 48.25328639
 48.95552883 52.93311596 54.19491707 54.65551041 51.42793663 54.42570582
 46.2280103 56.26434078 52.5646491 48.50953582 52.44259073 49.62214143
 55.65814694 57.59908408 60.92787703 43.01751832 42.77943097 47.47767069
 50.80018535 54.38084461 51.57817474 39.88899392 48.46897994 54.13987321
 51.15047368 53.8100559 48.88835929 48.99620966 50.93280695 52.05025824
 50.9914986 50.59504323 46.64668857 51.88781893 50.60910635 55.64741954
 55.9945894 50.92578209 48.12357525 46.80634796 52.11747177 50.38670034
 48.28073162 50.21798428 46.89999578 53.49016017]

3] # generate gaussian data 
data1 =  5  * randn( 100 ) +  40

[4]  print (data1)

[37.76435718 46.12253852 42.01745821 42.96789262 34.52544077 40.84691217
 43.70278226 35.23149699 38.66890747 40.16307273 33.1344134 41.57579696
 44.23080324 35.7024203 41.75272989 33.43858294 39.80652245 31.92113823
 45.60708854 42.04450269 39.87691522 36.1241919 46.36877965 49.83550875
 30.71009068 46.18082015 48.13825377 41.69005848 34.00365984 44.31672659
 39.09539849 36.98039686 33.84970932 42.75268748 43.96403433 36.88234635
 42.60288169 34.27829305 44.00930516 40.23283649 39.06715114 39.49127064
 44.34443079 43.7520582 42.64732662 40.68850605 40.38910564 43.09190131
 41.1624728 43.41275703 38.44941613 27.82581118 45.19412301 50.93489823
 42.20682222 39.49922383 39.31777628 39.40472906 40.08704704 34.38990636
 37.41452771 35.01486586 41.24399581 38.51679424 42.47605662 39.1264842
 44.93167594 41.06766951 50.95349864 30.51819539 36.76541656 44.50743446
 52.64162853 38.75682611 40.21834497 38.86842879 46.65728556 38.56346068
 43.4003492 38.40099201 33.63720622 41.5677386 42.51592407 46.46612941
 39.44776487 36.91318968 42.81380548 41.20368546 41.40332539 39.63443648
 45.80169285 41.84746358 49.52329354 45.55528349 43.29524898 31.8628083
 43.0115964 42.10141102 44.05475836 45.22221047]
 
[5] print (mean(data1), std(data1

40.76397388810099 4.6599740872749775

[6] print('mean=%.3f stdv=%.3f' % (mean(data1), std(data1)))

mean=40,764 stdv=4,660

[7] # histogram plot
from matplotlib import pyplot
# histogram plot
pyplot.hist(data)
pyplot.show()


[8th] # QQ Plot 
from  statsmodels.graphics.gofplots  import  qqplot 
# qq plot 
qqplot(data, line= 's' ) 
pyplot.show()

[9] # Shapiro-Wilk Test
from scipy.stats import shapiro
# normality test
stat, p = shapiro(data)
print('Statistics=%.3f, p=%.3f' % (stat, p))
# interpret
alpha = 0.05
if p > alpha:
    print('Sample looks Gaussian (fail to reject H0)')
else:
    print('Sample does not look Gaussian (reject H0)')
Statistics=0.992, p=0.822
Sample looks Gaussian (fail to reject H0)

[10] # D'Agostino and Pearson's Test
from scipy.stats import normaltest
# normality test
stat, p = normaltest(data)
print('Statistics=%.3f, p=%.3f' % (stat, p))
# interpret
alpha = 0.05
if p > alpha:
    print('Sample looks Gaussian (fail to reject H0)')
else:
    print('Sample does not look Gaussian (reject H0)')
Statistics=0.102, p=0.950
Sample looks Gaussian (fail to reject H0)

[11] # Anderson-Darling Test
from scipy.stats import anderson
# normality test
result = anderson(data)
print('Statistic: %.3f' % result.statistic)
p = 0
for i in range(len(result.critical_values)):
    sl, cv = result.significance_level[i], result.critical_values[i]
    if result.statistic < result.critical_values[i]:
        print('%.3f: %.3f, data looks normal (fail to reject H0)' % (sl, cv))
    else:
        print('%.3f: %.3f, data does not look normal (reject H0)' % (sl, cv))
Statistics: 0.220
15.000: 0.555, data looks normal (fail to reject H0)
10,000: 0.632, data looks normal (fail to reject H0)
5.000: 0.759, data looks normal (fail to reject H0)
2.500: 0.885, data looks normal (fail to reject H0)
1,000: 1,053, data looks normal (fail to reject H0)
